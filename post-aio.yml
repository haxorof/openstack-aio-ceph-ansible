---
- name: Install and configure OpenStack
  hosts: aio1
  remote_user: ansible
  become: yes
  vars:
    upload_images:
      - url: http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.img
        name: cirros-0.4.0-x86_64-disk
        format: qcow2        
      - url: https://cloud-images.ubuntu.com/artful/current/artful-server-cloudimg-amd64.img
        name: artful-server-cloudimg-amd64
        format: qcow2        
      - url: https://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud.qcow2
        name: CentOS-7-x86_64-GenericCloud
        format: qcow2
  tasks:
    - name: Create public network
      shell: ". /root/openrc && \
        openstack network list -f value -c Name | grep 'public' || \
        (openstack network create public --external --provider-network-type flat --provider-physical-network flat --project admin && echo 'created')"
      register: _shell_net
      changed_when: _shell_net.stdout_lines | last == 'created'

    - name: Create subnet in public network
      shell: ". /root/openrc && \
        openstack subnet list -f value -c Name | grep 'public-subnet' || \
        (openstack subnet create public-subnet --network public --subnet-range 172.29.248.0/22 --no-dhcp --allocation-pool start=172.29.249.110,end=172.29.249.200 --gateway 172.29.248.100 && echo 'created')"
      register: _shell_subnet
      changed_when: _shell_subnet.stdout_lines | last == 'created'

    - name: Create test project
      shell: ". /root/openrc && \
        openstack project list -f value -c Name | grep 'test' || \
        (openstack project create test && echo 'created')"
      register: _shell_project
      changed_when: _shell_project.stdout_lines | last == 'created'

    - name: Create test user
      shell: ". /root/openrc && \
        openstack user list -f value -c Name | grep 'test' || \
        (openstack user create --password test --description 'Test User' test && echo 'created')"
      register: _shell_user
      changed_when: _shell_user.stdout_lines | last == 'created'

    - name: Assign test user access rights to test project
      shell: ". /root/openrc && \
        openstack role assignment list --user test --names -c Role -f value | grep '_member_' || \
        (openstack role add --user test --project test _member_ && echo 'added')"
      register: _shell_member
      changed_when: _shell_member.stdout_lines | last == 'added'

    - name: Create flavors
      shell: ". /root/openrc && \
        openstack flavor list -f value -c Name | grep '{{ item.name }}' || \
        ({{ item.cmd }} && echo 'created')"
      register: _shell_flavor
      changed_when: _shell_flavor.stdout_lines | last == 'created'
      with_items:
        - name: "m1.tiny"
          cmd: "openstack flavor create --vcpus 1 --disk 1 --ram 512 m1.tiny"
        - name: "m1.smaller"
          cmd: "openstack flavor create --vcpus 1 --disk 10 --ram 1024 m1.smaller"
        - name: "m1.small"
          cmd: "openstack flavor create --vcpus 1 --disk 20 --ram 2048 m1.small"
        - name: "m1.medium"
          cmd: "openstack flavor create --vcpus 2 --disk 40 --ram 4096 m1.medium"
        - name: "m1.large"
          cmd: "openstack flavor create --vcpus 4 --disk 80 --ram 8192 m1.large"
        - name: "m1.xlarge"
          cmd: "openstack flavor create --vcpus 8 --disk 160 --ram 16384 m1.xlarge"

    - name: Download OS images
      get_url:
        url: "{{ item.url }}"
        dest: "~/{{ item.name }}.{{ item.format }}"
      with_items: "{{ upload_images }}"

    - name: Convert qcow2 images to raw
      shell: "qemu-img convert -f {{ item.format }} -O raw {{ item.name }}.{{ item.format }} {{ item.name }}.raw"
      args:
        creates: "~/{{ item.name }}.raw"
        chdir: ~/
      with_items: "{{ upload_images }}"

    - name: Upload image
      shell: ". /root/openrc && \
        openstack image list -f value -c Name | grep '{{ item.name }}' || \
        (openstack image create --file ~/{{ item.name }}.raw --disk-format raw --container-format bare --public {{ item.name }} && echo 'created')"
      register: _shell_upload
      changed_when: _shell_upload.stdout_lines | last == 'created'
      with_items: "{{ upload_images }}"
